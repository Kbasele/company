{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\javascript\\\\Frontend3\\\\company-master\\\\src\\\\components\\\\UpdateCustomerForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport FetchKit from '../data/fetchKit';\nimport Button from './Button';\nimport { StyledForm, StyledCreateForm } from '../Style/StyledForms';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBuilding, faCashRegister, faChargingStation, faLock, faMailBulk, faPhoneAlt, faSitemap } from '@fortawesome/free-solid-svg-icons';\nimport { faFirefoxBrowser, faMonero, faVuejs } from '@fortawesome/free-brands-svg-icons';\nexport default function UpdateCustomerForm({\n  props\n}) {\n  _s();\n\n  const [formData, setFormData] = useState({});\n  const history = useHistory();\n  const customerId = props.match.params.id;\n\n  function getCustomerItem() {\n    FetchKit.getCostumerItemFetch(customerId).then(res => res.json()).then(data => setFormData(data));\n  }\n\n  useEffect(() => {\n    getCustomerItem();\n  }, []);\n\n  function handleOnChange(e) {\n    setFormData({ ...formData,\n      [e.target.name]: e.target.value\n    });\n  }\n\n  function renderInput(icon, name, label, type) {\n    return /*#__PURE__*/_jsxDEV(StyledCreateForm, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: type || \"text\",\n        name: name,\n        value: formData[name],\n        onChange: handleOnChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this);\n  }\n\n  function handleOnSubmit(e) {\n    e.preventDefault();\n    FetchKit.updateCostumerItemFetch(customerId, formData).then(res => res.json()).then(data => {\n      history.push(\"/homepage\");\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [renderInput(\"name\", \"Organisation Name\"), renderInput(\"organisationNr\", \"Organisation Number\"), renderInput(\"vatNr\", \"VAT number\"), renderInput(\"reference\", \"Reference\"), renderInput(\"paymentTerm\", \"Payment Term\"), renderInput(\"website\", \"website\", \"url\"), renderInput(\"email\", \"Email\"), renderInput(\"phoneNumber\", \"Phone Number\", \"tel\"), /*#__PURE__*/_jsxDEV(Button, {\n        handleClick: handleOnSubmit,\n        update: true,\n        label: \"update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        to: `/customers/${customerId}/`,\n        back: true,\n        label: \"back\",\n        children: \"back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UpdateCustomerForm, \"iKdlSzTFjLfWvIheMe2mo/FPbLM=\", false, function () {\n  return [useHistory];\n});\n\n_c = UpdateCustomerForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateCustomerForm\");","map":{"version":3,"sources":["C:/javascript/Frontend3/company-master/src/components/UpdateCustomerForm.jsx"],"names":["React","useState","useEffect","useHistory","Link","FetchKit","Button","StyledForm","StyledCreateForm","FontAwesomeIcon","faBuilding","faCashRegister","faChargingStation","faLock","faMailBulk","faPhoneAlt","faSitemap","faFirefoxBrowser","faMonero","faVuejs","UpdateCustomerForm","props","formData","setFormData","history","customerId","match","params","id","getCustomerItem","getCostumerItemFetch","then","res","json","data","handleOnChange","e","target","name","value","renderInput","icon","label","type","handleOnSubmit","preventDefault","updateCostumerItemFetch","push"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,UAAR,EAAoBC,IAApB,QAA+B,kBAA/B;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,sBAA7C;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,UAAT,EAAqBC,cAArB,EAAqCC,iBAArC,EAAwDC,MAAxD,EAAgEC,UAAhE,EAA4EC,UAA5E,EAAwFC,SAAxF,QAAyG,mCAAzG;AACA,SAASC,gBAAT,EAA2BC,QAA3B,EAAqCC,OAArC,QAAoD,oCAApD;AAIA,eAAe,SAASC,kBAAT,CAA4B;AAACC,EAAAA;AAAD,CAA5B,EAAqC;AAAA;;AAChD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMuB,OAAO,GAAGrB,UAAU,EAA1B;AACA,QAAMsB,UAAU,GAAGJ,KAAK,CAACK,KAAN,CAAYC,MAAZ,CAAmBC,EAAtC;;AAGA,WAASC,eAAT,GAA0B;AACtBxB,IAAAA,QAAQ,CAACyB,oBAAT,CAA8BL,UAA9B,EACCM,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,IAAI,IAAIX,WAAW,CAACW,IAAD,CAFzB;AAIH;;AAEDhC,EAAAA,SAAS,CAAC,MAAI;AACV2B,IAAAA,eAAe;AAClB,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASM,cAAT,CAAwBC,CAAxB,EAA0B;AACtBb,IAAAA,WAAW,CAAE,EAAC,GAAGD,QAAJ;AAAc,OAACc,CAAC,CAACC,MAAF,CAASC,IAAV,GAAiBF,CAAC,CAACC,MAAF,CAASE;AAAxC,KAAF,CAAX;AACH;;AAED,WAASC,WAAT,CAAqBC,IAArB,EAA2BH,IAA3B,EAAiCI,KAAjC,EAAwCC,IAAxC,EAA6C;AACzC,wBACI,QAAC,gBAAD;AAAA,8BACI;AAAA,kBAAQD;AAAR;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAOD;AAAP;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AACI,QAAA,IAAI,EAAEE,IAAI,IAAI,MADlB;AAEI,QAAA,IAAI,EAAEL,IAFV;AAGI,QAAA,KAAK,EAAEhB,QAAQ,CAACgB,IAAD,CAHnB;AAII,QAAA,QAAQ,EAAEH;AAJd;AAAA;AAAA;AAAA;AAAA,cAHJ,eAUI;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAcH;;AAED,WAASS,cAAT,CAAwBR,CAAxB,EAA0B;AACtBA,IAAAA,CAAC,CAACS,cAAF;AACAxC,IAAAA,QAAQ,CAACyC,uBAAT,CAAiCrB,UAAjC,EAA6CH,QAA7C,EACCS,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,IAAI,IAAI;AACVV,MAAAA,OAAO,CAACuB,IAAR,CAAa,WAAb;AACH,KAJD;AAMH;;AAED,sBACI;AAAA,2BACI;AAAA,iBACKP,WAAW,CAAC,MAAD,EAAS,mBAAT,CADhB,EAEKA,WAAW,CAAC,gBAAD,EAAmB,qBAAnB,CAFhB,EAGKA,WAAW,CAAC,OAAD,EAAU,YAAV,CAHhB,EAIKA,WAAW,CAAC,WAAD,EAAc,WAAd,CAJhB,EAKKA,WAAW,CAAC,aAAD,EAAgB,cAAhB,CALhB,EAMKA,WAAW,CAAC,SAAD,EAAY,SAAZ,EAAuB,KAAvB,CANhB,EAOKA,WAAW,CAAC,OAAD,EAAU,OAAV,CAPhB,EAQKA,WAAW,CAAC,aAAD,EAAgB,cAAhB,EAAgC,KAAhC,CARhB,eASI,QAAC,MAAD;AACI,QAAA,WAAW,EAAEI,cADjB;AAEI,QAAA,MAAM,EAAE,IAFZ;AAGI,QAAA,KAAK,EAAE;AAHX;AAAA;AAAA;AAAA;AAAA,cATJ,eAaI,QAAC,MAAD;AAAQ,QAAA,EAAE,EAAG,cAAanB,UAAW,GAArC;AAAyC,QAAA,IAAI,EAAE,IAA/C;AAAqD,QAAA,KAAK,EAAE,MAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH;;GAnEuBL,kB;UAEJjB,U;;;KAFIiB,kB","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport {useHistory, Link} from 'react-router-dom'\r\nimport FetchKit from '../data/fetchKit'\r\nimport Button from './Button'\r\nimport { StyledForm, StyledCreateForm } from '../Style/StyledForms'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBuilding, faCashRegister, faChargingStation, faLock, faMailBulk, faPhoneAlt, faSitemap } from '@fortawesome/free-solid-svg-icons'\r\nimport { faFirefoxBrowser, faMonero, faVuejs } from '@fortawesome/free-brands-svg-icons'\r\n\r\n\r\n\r\nexport default function UpdateCustomerForm({props}) {\r\n    const [formData, setFormData] = useState({})\r\n    const history = useHistory()\r\n    const customerId = props.match.params.id\r\n    \r\n\r\n    function getCustomerItem(){\r\n        FetchKit.getCostumerItemFetch(customerId)\r\n        .then(res => res.json())\r\n        .then(data => setFormData(data))\r\n        \r\n    }\r\n\r\n    useEffect(()=>{\r\n        getCustomerItem()\r\n    }, [])\r\n\r\n    function handleOnChange(e){\r\n        setFormData( {...formData, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function renderInput(icon, name, label, type){\r\n        return (\r\n            <StyledCreateForm>\r\n                <label>{label}</label>\r\n                <span>{icon}</span>\r\n                <input \r\n                    type={type || \"text\"}\r\n                    name={name} \r\n                    value={formData[name]}\r\n                    onChange={handleOnChange}\r\n                    \r\n                    />\r\n                <br/>\r\n            </StyledCreateForm>\r\n        )\r\n    }\r\n    \r\n    function handleOnSubmit(e){\r\n        e.preventDefault()\r\n        FetchKit.updateCostumerItemFetch(customerId, formData)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            history.push(\"/homepage\")\r\n        })\r\n        \r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <form>\r\n                {renderInput(\"name\", \"Organisation Name\")}\r\n                {renderInput(\"organisationNr\", \"Organisation Number\")}\r\n                {renderInput(\"vatNr\", \"VAT number\")}\r\n                {renderInput(\"reference\", \"Reference\")}\r\n                {renderInput(\"paymentTerm\", \"Payment Term\")}\r\n                {renderInput(\"website\", \"website\", \"url\")}\r\n                {renderInput(\"email\", \"Email\")}\r\n                {renderInput(\"phoneNumber\", \"Phone Number\", \"tel\")}\r\n                <Button \r\n                    handleClick={handleOnSubmit} \r\n                    update={true} \r\n                    label={\"update\"}/>\r\n                <Button to={`/customers/${customerId}/`} back={true} label={\"back\"}>back</Button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}